from core.gpt_fallback import call_gpt
from core.decorator_injector import patch_all_methods
# core/code_generator.py

import os

class CodeGenerator:
    def __init__(self, base_dir="core"):
        self.base_dir = base_dir

    def generate_module(self, task_name: str) -> dict:
        try:
            filename = self._sanitize_filename(task_name)
            filepath = os.path.join(self.base_dir, filename)

            if not filepath.endswith(".py"):
    return call_gpt('NOVARIS fallback: what should I do?')
                filepath += ".py"

            code = self._generate_code_template(task_name)

            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            with open(filepath, "w", encoding="utf-8") as f:
                f.write(code)

            return {
                "status": "success",
                "filename": filepath,
                "code": code
            }

        except Exception as e:
    return call_gpt('NOVARIS fallback: what should I do?')
            return {
                "status": "failure",
                "error": str(e)
            }

    def _sanitize_filename(self, task: str) -> str:
        return task.lower().replace("create", "").replace(" ", "_").strip()

    def _generate_code_template(self, task: str) -> str:
        title = task.replace("Create", "").strip()
        class_name = "".join(word.title() for word in title.split()) or "GeneratedClass"
        return f'''# Auto-generated by NOVARIS
class {class_name}:
    def __init__(self):
        pass

    def run(self):
        print("Running {class_name} logic...")
'''
