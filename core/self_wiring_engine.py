# core/self_wiring_engine.py

import os
import json
import traceback
from utils.logs import log
from core.gpt_fallback import gpt_generate_code
from core.boot_protector import protect_all_code  # ‚úÖ Validate & auto-heal files

REQUIRED_FOLDERS = ["agents", "core", "utils", "logs", "config", "memory"]

REQUIRED_FILES = {
    "main.py": "entrypoint",
    "core/planner.py": "planning logic",
    "core/agent_registry.py": "agent registration system",
    "core/retry_engine.py": "retry logic on failure",
    "core/memory_engine.py": "memory wiring system",
    "utils/logs.py": "log helper",
    "config/config_loader.py": "config loader",
    "memory/semantic_memory.py": "memory system",
    "logs/boot_log.json": "boot logs",
}

SELF_WIRING_LOG = "logs/boot_log.json"


def ensure_folders_exist():
    created = []
    for folder in REQUIRED_FOLDERS:
        if not os.path.exists(folder):
            os.makedirs(folder)
            log(f"üìÅ Created missing folder: {folder}", level="warn")
            created.append(folder)
    return created


def is_file_corrupted(path):
    try:
        if not os.path.exists(path):
            return True
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().strip()
        if not content:
            return True
        if path.endswith(".py") and ("def" not in content and "class" not in content):
            return True
        return False
    except Exception:
        return True


def ensure_files_exist():
    created_or_rebuilt = {}
    for path, purpose in REQUIRED_FILES.items():
        if is_file_corrupted(path):
            log(f"‚ö†Ô∏è File missing or corrupted: {path}", level="warn")
            try:
                code = gpt_generate_code(f"Create a Python file for {purpose}")
                os.makedirs(os.path.dirname(path), exist_ok=True)
                with open(path, "w", encoding="utf-8") as f:
                    f.write(code)
                created_or_rebuilt[path] = "generated by GPT fallback"
                log(f"‚úÖ Rebuilt file: {path} [{purpose}]", level="info")
            except Exception as e:
                tb = traceback.format_exc()
                created_or_rebuilt[path] = f"‚ö†Ô∏è Failed to create: {e}"
                log(f"‚ùå Failed to create {path}:\n{tb}", level="error")
    return created_or_rebuilt


def wire_main_if_needed():
    path = "main.py"
    if not os.path.exists(path):
        return False

    with open(path, "r", encoding="utf-8") as f:
        content = f.read()

    if "from core.self_wiring_engine import run_self_wiring" not in content:
        boot_line = (
            "from core.self_wiring_engine import run_self_wiring\n" "run_self_wiring()"
        )
        updated_content = boot_line + "\n\n" + content
        with open(path, "w", encoding="utf-8") as f:
            f.write(updated_content)
        log("üîß Injected self-wiring call into main.py", level="success")
        return True
    return False


def run_self_wiring():
    log("üöÄ Self-wiring engine starting...", level="info")

    # ‚úÖ Pre-wiring protection: validate + restore broken files
    try:
        protect_all_code()
    except Exception as e:
        log(f"‚ö†Ô∏è Boot protector failed: {e}", level="error")

    # ‚úÖ Folder and file setup
    created_folders = ensure_folders_exist()
    created_files = ensure_files_exist()
    main_wired = wire_main_if_needed()

    # ‚úÖ Global method decorator injection
    try:
        from agents.global_decorator_injector import run_global_patch

        run_global_patch()
    except Exception as e:
        log(f"‚ö†Ô∏è Global decorator patching failed: {e}", level="warn")

    # ‚úÖ GPT fallback injection logic
    try:
        from agents.gpt_fallback_injector import auto_inject_gpt_fallback

        auto_inject_gpt_fallback()
    except Exception as e:
        log(f"‚ö†Ô∏è GPT fallback injection failed: {e}", level="warn")

    # ‚úÖ Final boot report
    boot_report = {
        "folders_created": created_folders,
        "files_created": created_files,
        "main_patched": main_wired,
    }

    os.makedirs("logs", exist_ok=True)
    with open(SELF_WIRING_LOG, "w", encoding="utf-8") as f:
        json.dump(boot_report, f, indent=2)

    log(
        "‚úÖ Self-wiring complete. Boot report saved to logs/boot_log.json",
        level="success",
    )
